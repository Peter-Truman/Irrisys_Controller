# IRRISYS Irrigation Pump Protection System
## Project Documentation & Development Bridge - v2 (December 2024)

### CRITICAL - CURRENT WORKING STATE
**Date:** December 2024
**Status:** LCD working, numeric editor partially implemented
**Branch:** working-version (on GitHub)
**DO NOT MODIFY:** LCD display positioning code (locked and working)

### System Overview
**Platform:** PIC18F2525 microcontroller  
**Compiler:** XC8 v2.46
**Clock:** 32MHz (_XTAL_FREQ = 32000000)
**Language:** C (originally from Positron BASIC)
**Purpose:** Industrial irrigation pump protection system with multi-sensor monitoring and relay control

### Core Functionality
The IRRISYS system monitors three independent sensor inputs to protect irrigation pumps from damage due to:
- Over/under pressure conditions
- Temperature extremes  
- Flow anomalies (low flow)

---

## CRITICAL CODE SECTIONS - DO NOT MODIFY

### LCD Display Positioning (WORKING - DO NOT CHANGE)
The LCD has 20 columns (numbered 1-20):
- Column 20 is RESERVED for closing cursor character (']' in list mode, ')' in edit mode)
- Value text must ALWAYS end at column 19
- Brackets/parentheses are printed SEPARATELY from values

#### Working Code for List Mode Display:
```c
// In menu_draw_input() - DO NOT CHANGE
if (show_brackets == 0)
{
    // No brackets - value ends at column 19
    lcd_print_at(i + 1, 19 - val_len, value_buf);
}
else
{
    // With brackets - print everything in one sequence
    uint8_t start_pos = 19 - val_len - 1; // Where opening bracket goes
    lcd_set_cursor(i + 1, start_pos);
    
    // Print opening bracket
    lcd_print(show_brackets == 1 ? "[" : "(");
    // Print value immediately after
    lcd_print(value_buf);
    // Print closing bracket immediately after
    lcd_print(show_brackets == 1 ? "]" : ")");
}
```

#### Working Code for Edit Mode Display:
```c
// In menu_update_edit_value() - DO NOT CHANGE
uint8_t start_pos = 18 - val_len; // THIS IS CORRECT - DO NOT CHANGE
lcd_set_cursor(screen_line + 1, start_pos);

// Print opening parenthesis
lcd_print("(");
// Print value immediately after (will end at column 19)
lcd_print(value_buf);
// Print closing parenthesis immediately after (at column 20)
lcd_print(")");
```

---

## Current Implementation Status (December 2024)

### COMPLETED AND WORKING:
1. ✅ Basic menu navigation (OPTIONS → SETUP → INPUT)
2. ✅ Enable/Disable editing with option cycling
3. ✅ Sensor type editing (Pressure/Temp/Flow)
4. ✅ LCD positioning with brackets (DO NOT MODIFY)
5. ✅ Value display format for Scale 4mA/20mA as signed (+000 format)
6. ✅ Numeric editor initialization
7. ✅ Sign toggle working (only sign blinks, not whole value)
8. ✅ Proper separation of numeric vs option editing

### IN PROGRESS - Numeric Editor for Scale 4mA/20mA:
- ✅ Sign editing (position 0) - WORKING
- ⏳ Hundreds digit editing (position 1) - NOT YET
- ⏳ Tens digit editing (position 2) - NOT YET
- ⏳ Units digit editing (position 3) - NOT YET
- ⏳ Short press to advance positions - NOT YET
- ⏳ Save on final short press - NOT YET
- ⏳ Cancel on long press - NOT YET

### Functions Added for Numeric Editing:
```c
// In menu.c
void init_numeric_editor(int16_t value);
int16_t get_current_numeric_value(void);
void handle_numeric_rotation(int8_t direction);
void menu_update_numeric_value(void);
```

### Menu State Structure (in menu.h):
```c
typedef struct {
    uint8_t current_line;
    uint8_t top_line;
    uint8_t total_items;
    uint8_t in_edit_mode;
    uint8_t blink_state;
    uint16_t blink_counter;
    
    // Numeric editor state
    uint8_t edit_digit;      // 0=sign, 1=hundreds, 2=tens, 3=units
    uint8_t sign_negative;   // 0=positive, 1=negative
    uint8_t digit_100;       // Hundreds digit (0-5)
    uint8_t digit_10;        // Tens digit (0-9)
    uint8_t digit_1;         // Units digit (0-9)
    int16_t original_value;  // Store original value for cancel
} menu_state_t;
```

---

## Numeric Editor Specifications (For Completion)

### Entry/Exit:
- Enter: Short press on Scale 4mA or Scale 20mA line item
- Exit: Short press after units digit OR long press at any time (cancel)

### Edit Sequence:
1. **Sign (position 0):** Blinks at 2Hz, toggle +/-, short press advances
2. **Hundreds (position 1):** Blinks at 2Hz, range 0-5, short press advances
3. **Tens (position 2):** Blinks at 2Hz, range 0-9 (0 if hundreds=5), short press advances
4. **Units (position 3):** Blinks at 2Hz, range 0-9 (0 if value=500), short press saves

### Display Format:
- List mode: `[+000]` with `]` at column 20
- Edit mode: `(+000)` with `)` at column 20
- Only current digit blinks, others stay solid

### Bounds:
- Range: -500 to +500
- Real-time bounds checking prevents exceeding limits

---

## Critical Implementation Notes

### Memory Constraints
- **PIC18F2525:** 48KB program memory, 3968 bytes RAM
- **EEPROM:** 1024 bytes (configuration uses ~200 bytes)
- Adding too many features can cause LCD to fail (memory overflow)

### Working Build Configuration
- Compiler: XC8 v2.46
- Optimization: Default
- Clock: 32MHz internal oscillator

### File Structure
```
Irrisys_Controller/
├── include/
│   ├── config.h
│   ├── menu.h
│   ├── encoder.h
│   ├── lcd.h
│   └── eeprom.h
├── src/
│   ├── main.c
│   ├── menu.c
│   ├── encoder.c
│   ├── lcd.c
│   └── eeprom.c
└── tools/
    └── build.bat
```

---

## Next Development Steps

### To Complete Numeric Editor:
1. Add button handling to advance edit_digit on short press
2. Implement bounds checking for each digit position
3. Add save functionality on final short press
4. Add cancel/restore on long press
5. Test with various values (-500, 0, +500, etc.)

### Future Features (After Numeric Editor):
1. Time value editing (mm:ss format)
2. Pressure/temperature setpoint editing
3. Relay mode selection
4. Main display screen
5. System menu implementation

---

## GitHub Repository Information
- **Repository:** https://github.com/Peter-Truman/Irrisys_Controller
- **Current Branch:** working-version
- **Last Working Commit Message:** "Working numeric editor - sign toggle complete"

---

## WARNINGS FOR NEXT SESSION

### DO NOT MODIFY:
1. LCD positioning code (it works perfectly)
2. Menu navigation structure
3. Blink timer values
4. Enable/Sensor editing logic

### KNOWN ISSUES TO AVOID:
1. Declaring variables in menu.c as `extern` when they're defined in same file (causes linker errors)
2. Including brackets/parentheses in value strings (they must be printed separately)
3. Adding too many features at once (causes memory overflow and LCD failure)

### SAFE TO MODIFY:
1. Numeric editor state machine (advancing digits)
2. Button handling for numeric fields
3. Bounds checking logic
4. Save/cancel functionality

---

## Testing Checklist
Before declaring any feature complete:
- [ ] Test with minimum value (-500)
- [ ] Test with maximum value (+500)
- [ ] Test with zero (both +000 and -000)
- [ ] Test cancel at each digit position
- [ ] Test bounds (can't exceed ±500)
- [ ] Verify LCD positioning stays correct
- [ ] Check memory usage doesn't break LCD

---

## Contact & Support
This document serves as a bridge between development sessions. When continuing work:
1. Review current status section
2. Check GitHub working-version branch
3. Test LCD still works before adding features
4. Make small incremental changes
5. Commit working code frequently

**Remember:** The system is working. Build on it carefully. Test after each small change.
